<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Colan Biemer</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Colan Biemer</description>
    <generator>Hugo -- 0.139.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Nov 2024 20:27:29 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Second</title>
      <link>http://localhost:1313/games/second/</link>
      <pubDate>Tue, 19 Nov 2024 20:27:29 -0500</pubDate>
      <guid>http://localhost:1313/games/second/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Hello, world! I&amp;rsquo;m here again :D&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typing Game</title>
      <link>http://localhost:1313/posts/typing-game/</link>
      <pubDate>Thu, 20 Aug 2020 18:27:14 -0500</pubDate>
      <guid>http://localhost:1313/posts/typing-game/</guid>
      <description>&lt;p&gt;In this post, I want to show how to implement a simple web-based typing game. A version of the final product is online; the code is on Github. The game has a menu screen where users can select whether or not to allow capitals letters and press a button to start the game. When the player begins the game, they’ll see characters—not necessarily a valid word, more an assortment of letters—to type. After the user has finished typing, the next value will be longer than the previous one. The game continues until the player mistypes. At which point, the user can see how well they did and restart.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chrome Invert Colors</title>
      <link>http://localhost:1313/posts/chrome-invert-colors/</link>
      <pubDate>Thu, 28 May 2020 18:22:50 -0500</pubDate>
      <guid>http://localhost:1313/posts/chrome-invert-colors/</guid>
      <description>&lt;p&gt;If it were up to me, every website would be required to have a theme option of light or dark. Unfortunately, it is not. It is uncommon to find websites that include both options or, at least, default to dark mode. Recently FaceBook included a dark mode option and slack now has it built into their app. It is a wonderful thing to see it become more popular. Still, there is no guarantee. As a result, I have turned to &lt;a href=&#34;https://darkreader.org/&#34;&gt;Dark Reader&lt;/a&gt;. A great chrome extension that will automatically run on all websites but gives you the option to turn off it completely or turn off for certain websites.&lt;/p&gt;</description>
    </item>
    <item>
      <title>N-Grams: Joint Probability</title>
      <link>http://localhost:1313/posts/n-gram-joint-probability/</link>
      <pubDate>Wed, 11 Sep 2019 18:11:10 -0500</pubDate>
      <guid>http://localhost:1313/posts/n-gram-joint-probability/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s start by examining the simplest case of joint probability with single word probability via a uni-gram. If we want to know the probability of a word, without any context appearing before or after, then we could take a corpus of text and convert it into a dictionary with the key for the word and the count as the value: &lt;code&gt;{ &amp;quot;a&amp;quot;: 1000, &amp;quot;an&amp;quot;: 3, &amp;quot;animal&amp;quot;: 12, ... }&lt;/code&gt;. Say we want to calculate &lt;code&gt;P(&amp;quot;a&amp;quot;)&lt;/code&gt;, meaning the likelihood of &amp;ldquo;a.&amp;rdquo; We would take the count of occurrences for the word &amp;ldquo;a&amp;rdquo; and divide it by the total number of words in the corpus: &lt;code&gt;P(&amp;quot;a&amp;quot;) ≈ count(&amp;quot;a&amp;quot;) / corpus_word_count&lt;/code&gt;. This is called maximum likelihood estimation (MLE) and we use the &amp;ldquo;≈&amp;rdquo; sign because our corpus is not a perfect representation of the actual likelihood of the word.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ring Buffers</title>
      <link>http://localhost:1313/posts/ring-buffer/</link>
      <pubDate>Sun, 08 Sep 2019 18:03:23 -0500</pubDate>
      <guid>http://localhost:1313/posts/ring-buffer/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;../harry-potter-n-grams/&#34;&gt;last post&lt;/a&gt; I discussed n-grams and gave an example of them being used on the text of Harry Potter but I didn&amp;rsquo;t cover the implementation and instead linked the source. Today, I want to go over a key data structure used in my implementation: ring buffers (also known as a circular buffer).&lt;/p&gt;
&lt;p&gt;A ring buffer needs a max size, &lt;code&gt;N&lt;/code&gt;, that represents its max capacity. Until the buffer has reached its max capacity, it is exactly like a list. However, once the max capacity is reached the buffer will drop elements when new ones are added resulting in a first in first out (FIFO) behavior. An example of this data structure in action can be seen below. We initialize a ring buffer of size three. At first the ring buffer acts like a list but stops when the fourth element is added. On this add, the ring buffer drops the 0 because it was the first element added and the buffer has reached its max capacity of three. Say, for example, we ran this again and added a four. The buffer would then be &lt;code&gt;[2,3,4]&lt;/code&gt; because the one would be the next element to be dropped.&lt;/p&gt;</description>
    </item>
    <item>
      <title>N-Grams With Harry Potter</title>
      <link>http://localhost:1313/posts/harry-potter-n-grams/</link>
      <pubDate>Thu, 05 Sep 2019 15:32:07 -0500</pubDate>
      <guid>http://localhost:1313/posts/harry-potter-n-grams/</guid>
      <description>&lt;p&gt;I recently started grad school and one of the classes I am taking is Natural Language Processing (NLP). Before the class I decided to watch a few videos on NLP and came across N-Grams. I have not made it known in any of my past posts but I love N-Grams. One of my projects is around reinforcing N-Grams which I hope to post about sometime later this year. Digression aside, I decided it would be a fun project to write an n-gram that uses the text of Harry Potter as input and see what we get; I know it isn&amp;rsquo;t the most original idea but it was fun.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Procjam 2018 Postmortem</title>
      <link>http://localhost:1313/posts/procjam-2018-postmortem/</link>
      <pubDate>Sun, 10 Feb 2019 15:08:15 -0500</pubDate>
      <guid>http://localhost:1313/posts/procjam-2018-postmortem/</guid>
      <description>&lt;p&gt;A few months ago I completed the annual &lt;a href=&#34;https://www.procjam.com/&#34;&gt;ProcJam&lt;/a&gt; jam. I wish I had considered doing a postmortem beforehand when everything was fresh, but now I am preparing for &lt;a href=&#34;http://www.roguebasin.com/index.php?title=7DRL&#34;&gt;7DRL&lt;/a&gt;. I figure a retrospective on how I did in the last jam will be useful for the upcoming one.&lt;/p&gt;
&lt;p&gt;Before beginning, I would like to preface this with the fact that I was sick for the entire jam. It’s not an excuse but it is one of the reasons why I did not complete as much as I would have liked to in the game. My original design was a weapon based roguelike, minus turn-based, where the player is trying to get through as many levels as possible. The weapons would be dropped by enemies and they would be adversarially generated. Meaning, a player that spams weapon shots would receive guns that shoot slower. A player that was extremely accurate would receive guns that would spray, such as a shotgun. In addition, all levels would be procedurally generated. I hoped to get in a few enemies and had a stretch goal of creating a boss. Lastly, I hoped to make the game a platformer. In short, I had an ambitious scope for a ten-day jam even if I wasn’t sick.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Q Learning: Starting From the Top</title>
      <link>http://localhost:1313/posts/q-learning-from-the-top/</link>
      <pubDate>Sat, 26 Jan 2019 15:00:28 -0500</pubDate>
      <guid>http://localhost:1313/posts/q-learning-from-the-top/</guid>
      <description>&lt;p&gt;I want to go over Q-learning (a form of reinforcement learning) in this post. To start, we could go in two directions. We could explore at the bottom and look at the math behind neural networks and Q-learning. Or we could start at the top and see the end result. We are going to go with the latter.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
  &lt;figure&gt;
    &lt;img src=&#34;http://localhost:1313/images/q-learning-top/env.jpg&#34; alt=&#34;&#34;&gt;
    &lt;small&gt;Figure 1: The mountain car environment.&lt;/small&gt;
  &lt;/figure&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;To do this we are going to need a few libraries and a testbed. To test, we are going to use &lt;a href=&#34;https://gym.openai.com/&#34;&gt;OpenAI’s Gym&lt;/a&gt; and use &lt;a href=&#34;https://gym.openai.com/envs/MountainCar-v0/&#34;&gt;MountainCar-V0&lt;/a&gt;. In this environment, proposed by Andrew Moore in his Ph.D. thesis, the car must reach the flag seen in figure 1. The car, though, does not have enough acceleration to achieve this by just going forward. Instead, it must go back and forward, steadily gaining enough speed to reach the goal. This is a problem that can be solved simply with a rule-based agent, however, reinforcement approaches can struggle with this. You’ll soon see that the amount of episodes it takes for q-learning to solve this is more than expected.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redacting PDFs</title>
      <link>http://localhost:1313/posts/redacting-pdfs/</link>
      <pubDate>Sun, 29 Jul 2018 14:53:17 -0500</pubDate>
      <guid>http://localhost:1313/posts/redacting-pdfs/</guid>
      <description>&lt;p&gt;One day at work, I walked by someone who was going through a large set of PDFs and for everyone he put a block box over the name field. He mentioned it would take him several hours to accomplish this extremely menial task. Naturally, I found myself attracted to the problem due to my love of automation. I decided then and there I would write a small script that he could use to redact large set of similarly formatted PDFs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Fractal Trees</title>
      <link>http://localhost:1313/posts/fractal-tree/</link>
      <pubDate>Tue, 10 Jul 2018 14:19:03 -0500</pubDate>
      <guid>http://localhost:1313/posts/fractal-tree/</guid>
      <description>&lt;p&gt;I came across a &lt;a href=&#34;https://www.youtube.com/watch?v=0jjeOYMjmDU&#34;&gt;youtube video&lt;/a&gt; which showed a way to visualize fractal trees. I watched it while eating dinner and didn’t think much of it at the time. A week or two later, though, I had decided to a do a few more challenges for my &lt;a href=&#34;https://github.com/bi3mer/challenges&#34;&gt;challenges repository&lt;/a&gt; and this was at the top of the list. It is a fairly simple program that has a cool end result seen in figures one and four.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generative Design in Mineraft: Nuking the Ground</title>
      <link>http://localhost:1313/posts/gdmc2/</link>
      <pubDate>Sun, 17 Jun 2018 13:59:57 -0500</pubDate>
      <guid>http://localhost:1313/posts/gdmc2/</guid>
      <description>&lt;h1 id=&#34;a-quick-note&#34;&gt;A Quick Note&lt;/h1&gt;
&lt;p&gt;I ended up getting pretty sick and I was out of commission for about two months. The good news is that I’m now in perfectly good health. The bad news is that it kind of destroyed my hopes of building a decent submission for GDMC. The competition ends in about thirteen days which is not enough time to come up with a submission I would be proud of. In addition, my 40+ hours at the &lt;a href=&#34;https://braingamecenter.ucr.edu/&#34;&gt;Brain Game Center&lt;/a&gt;, where I work, every week is the very large nail in the coffin. Regardless, I plan on continuing to work on this problem until I have something cool I can show off.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Sorting Algorithms with OpenGL</title>
      <link>http://localhost:1313/posts/visualizing-sorting-algorithms-with-opengl/</link>
      <pubDate>Fri, 20 Apr 2018 12:25:07 -0500</pubDate>
      <guid>http://localhost:1313/posts/visualizing-sorting-algorithms-with-opengl/</guid>
      <description>&lt;p&gt;If you’ve read my previous posts, then you know I love python. Regardless, it has been a goal of mine to be proficient in c++. I’m not exactly sure why I’m fascinated with this language that I have no uses cases for, but I think it stems from my love of video games. C++ is used extensively by my favorite company, Blizzard Entertainment, and sees a wide range of use across the industry. In addition, it also is apart of a field that is of particular interest for me, AI. For example, &lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;tensorflow&lt;/a&gt; is implemented in c++.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Rush Hour: Github and Matrix Formats</title>
      <link>http://localhost:1313/posts/making-rush-hour-2/</link>
      <pubDate>Tue, 20 Mar 2018 12:03:38 -0500</pubDate>
      <guid>http://localhost:1313/posts/making-rush-hour-2/</guid>
      <description>&lt;h1 id=&#34;source-control-and-github&#34;&gt;Source Control and GitHub&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; is an awesome website that allows you to have unlimited repositories, for free, that are backed up with &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; on a remote server. In addition, it provides you with helpful tools like &lt;a href=&#34;https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues&#34;&gt;issues&lt;/a&gt; that allow you to keep track of bugs, features, and anything else you want. It is not the end all be all of &lt;a href=&#34;https://aws.amazon.com/devops/source-control/&#34;&gt;source control&lt;/a&gt; and has &lt;a href=&#34;https://www.timedoctor.com/blog/git-mecurial-and-cvs-comparison-of-svn-software/&#34;&gt;pros and cons that should be considered&lt;/a&gt; before being used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Rush Hour: Requirements and Basic Structuring</title>
      <link>http://localhost:1313/posts/making-rush-hour-1/</link>
      <pubDate>Sun, 18 Mar 2018 11:53:47 -0500</pubDate>
      <guid>http://localhost:1313/posts/making-rush-hour-1/</guid>
      <description>&lt;p&gt;This is the first in a series of posts where I discuss implementing a version of &lt;a href=&#34;https://apps.apple.com/us/app/unblock-me/id315019111&#34;&gt;Unblock Me&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Rush_Hour_(puzzle)&#34;&gt;Rush Hour&lt;/a&gt;; sample screen shots can be seen in figure one. For the implementation, I’ve decided to use Python 2.7, however, you should be able to follow along with any language. My hope is that each of these posts will be more than just a copy and paste tutorial. To facilitate this, I will be taking deep dives into design decisions, test-driven design, common game AI architecture, general software structure, requirements gathering, servers, and more.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generative Design in Mineraft: MCEdit Basics</title>
      <link>http://localhost:1313/posts/gdmc1/</link>
      <pubDate>Mon, 26 Feb 2018 20:27:29 -0500</pubDate>
      <guid>http://localhost:1313/posts/gdmc1/</guid>
      <description>&lt;h1 id=&#34;generative-design-in-minecraft-gdmc&#34;&gt;Generative Design in Minecraft (GDMC)&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://gendesignmc.engineering.nyu.edu/&#34;&gt;GDMC&lt;/a&gt; is a competition to generate settlements within a selection of a minecraft map. The &lt;a href=&#34;http://gendesignmc.engineering.nyu.edu/&#34;&gt;project&amp;rsquo;s website&lt;/a&gt; provides details on how the competition works and what is expected. However, the main point to get across right now is that they are judging based on adaptability, functionality, narrative, and aesthetics. Adaptability is about the generation technique working with the map rather than ignoring it. An example of ignoring the environment would be generating a wooden village where there are no trees. The functionality component is based on real world criteria such as access to food, defenses, etc. The narrative component is about how every area has a story to tell. An example is a castle with part of the tower knocked down. Lastly, aesthetics is about how it looks both in terms of believability and general appeal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; to Python Bindings with Swig</title>
      <link>http://localhost:1313/posts/first/</link>
      <pubDate>Wed, 25 Oct 2017 20:24:55 -0500</pubDate>
      <guid>http://localhost:1313/posts/first/</guid>
      <description>&lt;p&gt;This is a quick walk through of how to take c++ and run it with Python through bindings. If you find yourself wishing to learn more on the topic, &lt;a href=&#34;http://www.swig.org/Doc1.3/Python.html&#34;&gt;Swig’s website&lt;/a&gt; for working with Python is a good start. My experience in setting this up was far more tedious than it had to be and I hope this will save people some time. As a note, I currently work on Ubuntu 16.04 and Python 2.7; this will be tailored to those dependencies, however, I do not believe any major changes will be required to the setup.py file based on &lt;a href=&#34;http://www.swig.org/Doc1.3/Python.html&#34;&gt;Swig&amp;rsquo;s website&lt;/a&gt; and a &lt;a href=&#34;https://stackoverflow.com/questions/32667888/building-extension-for-python-3-with-swig-and-distutils&#34;&gt;StackOverflow question for Python 3&lt;/a&gt;. In addition, the majority of operating systems should be covered by this walk through, with minor tweaks such as yum instead of apt-get for select operating systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Publications</title>
      <link>http://localhost:1313/publications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/publications/</guid>
      <description>&lt;p&gt;Biemer, C., &amp;amp; Cooper, S. (2024, May). Solution Path Heuristics for Predicting Difficulty and Enjoyment Ratings of Roguelike Level Segments. In Proceedings of the 19th International Conference on the Foundations of Digital Games (pp. 1-8). &lt;br&gt;
&lt;a href=&#34;http://localhost:1313/pdf/2024_solution_path_heuristics.pdf&#34;&gt;Paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Biemer, C. F. (2023, October). Dynamic difficulty adjustment via procedural level generation guided by a Markov decision process for platformers and roguelikes. In Proceedings of the AAAI Conference on Artificial Intelligence and Interactive Digital Entertainment (Vol. 19, No. 1, pp. 436-439). &lt;br&gt;
&lt;a href=&#34;http://localhost:1313/pdf/2023_ddaviaplgviamdp.pdf&#34;&gt;Paper&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
