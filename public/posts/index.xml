<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Colan Biemer</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Colan Biemer</description>
    <generator>Hugo -- 0.139.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Jul 2018 14:53:17 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redacting PDFs</title>
      <link>http://localhost:1313/posts/redacting-pdfs/</link>
      <pubDate>Sun, 29 Jul 2018 14:53:17 -0500</pubDate>
      <guid>http://localhost:1313/posts/redacting-pdfs/</guid>
      <description>&lt;p&gt;One day at work, I walked by someone who was going through a large set of PDFs and for everyone he put a block box over the name field. He mentioned it would take him several hours to accomplish this extremely menial task. Naturally, I found myself attracted to the problem due to my love of automation. I decided then and there I would write a small script that he could use to redact large set of similarly formatted PDFs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Fractal Trees</title>
      <link>http://localhost:1313/posts/fractal-tree/</link>
      <pubDate>Tue, 10 Jul 2018 14:19:03 -0500</pubDate>
      <guid>http://localhost:1313/posts/fractal-tree/</guid>
      <description>&lt;p&gt;I came across a &lt;a href=&#34;https://www.youtube.com/watch?v=0jjeOYMjmDU&#34;&gt;youtube video&lt;/a&gt; which showed a way to visualize fractal trees. I watched it while eating dinner and didn’t think much of it at the time. A week or two later, though, I had decided to a do a few more challenges for my &lt;a href=&#34;https://github.com/bi3mer/challenges&#34;&gt;challenges repository&lt;/a&gt; and this was at the top of the list. It is a fairly simple program that has a cool end result seen in figures one and four.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generative Design in Mineraft: Nuking the Ground</title>
      <link>http://localhost:1313/posts/gdmc2/</link>
      <pubDate>Sun, 17 Jun 2018 13:59:57 -0500</pubDate>
      <guid>http://localhost:1313/posts/gdmc2/</guid>
      <description>&lt;h1 id=&#34;a-quick-note&#34;&gt;A Quick Note&lt;/h1&gt;
&lt;p&gt;I ended up getting pretty sick and I was out of commission for about two months. The good news is that I’m now in perfectly good health. The bad news is that it kind of destroyed my hopes of building a decent submission for GDMC. The competition ends in about thirteen days which is not enough time to come up with a submission I would be proud of. In addition, my 40+ hours at the &lt;a href=&#34;https://braingamecenter.ucr.edu/&#34;&gt;Brain Game Center&lt;/a&gt;, where I work, every week is the very large nail in the coffin. Regardless, I plan on continuing to work on this problem until I have something cool I can show off.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Sorting Algorithms with OpenGL</title>
      <link>http://localhost:1313/posts/visualizing-sorting-algorithms-with-opengl/</link>
      <pubDate>Fri, 20 Apr 2018 12:25:07 -0500</pubDate>
      <guid>http://localhost:1313/posts/visualizing-sorting-algorithms-with-opengl/</guid>
      <description>&lt;p&gt;If you’ve read my previous posts, then you know I love python. Regardless, it has been a goal of mine to be proficient in c++. I’m not exactly sure why I’m fascinated with this language that I have no uses cases for, but I think it stems from my love of video games. C++ is used extensively by my favorite company, Blizzard Entertainment, and sees a wide range of use across the industry. In addition, it also is apart of a field that is of particular interest for me, AI. For example, &lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;tensorflow&lt;/a&gt; is implemented in c++.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Rush Hour: Github and Matrix Formats</title>
      <link>http://localhost:1313/posts/making-rush-hour-2/</link>
      <pubDate>Tue, 20 Mar 2018 12:03:38 -0500</pubDate>
      <guid>http://localhost:1313/posts/making-rush-hour-2/</guid>
      <description>&lt;h1 id=&#34;source-control-and-github&#34;&gt;Source Control and GitHub&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; is an awesome website that allows you to have unlimited repositories, for free, that are backed up with &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; on a remote server. In addition, it provides you with helpful tools like &lt;a href=&#34;https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues&#34;&gt;issues&lt;/a&gt; that allow you to keep track of bugs, features, and anything else you want. It is not the end all be all of &lt;a href=&#34;https://aws.amazon.com/devops/source-control/&#34;&gt;source control&lt;/a&gt; and has &lt;a href=&#34;https://www.timedoctor.com/blog/git-mecurial-and-cvs-comparison-of-svn-software/&#34;&gt;pros and cons that should be considered&lt;/a&gt; before being used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Rush Hour: Requirements and Basic Structuring</title>
      <link>http://localhost:1313/posts/making-rush-hour-1/</link>
      <pubDate>Sun, 18 Mar 2018 11:53:47 -0500</pubDate>
      <guid>http://localhost:1313/posts/making-rush-hour-1/</guid>
      <description>&lt;p&gt;This is the first in a series of posts where I discuss implementing a version of &lt;a href=&#34;https://apps.apple.com/us/app/unblock-me/id315019111&#34;&gt;Unblock Me&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Rush_Hour_(puzzle)&#34;&gt;Rush Hour&lt;/a&gt;; sample screen shots can be seen in figure one. For the implementation, I’ve decided to use Python 2.7, however, you should be able to follow along with any language. My hope is that each of these posts will be more than just a copy and paste tutorial. To facilitate this, I will be taking deep dives into design decisions, test-driven design, common game AI architecture, general software structure, requirements gathering, servers, and more.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generative Design in Mineraft: MCEdit Basics</title>
      <link>http://localhost:1313/posts/gdmc1/</link>
      <pubDate>Mon, 26 Feb 2018 20:27:29 -0500</pubDate>
      <guid>http://localhost:1313/posts/gdmc1/</guid>
      <description>&lt;h1 id=&#34;generative-design-in-minecraft-gdmc&#34;&gt;Generative Design in Minecraft (GDMC)&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://gendesignmc.engineering.nyu.edu/&#34;&gt;GDMC&lt;/a&gt; is a competition to generate settlements within a selection of a minecraft map. The &lt;a href=&#34;http://gendesignmc.engineering.nyu.edu/&#34;&gt;project&amp;rsquo;s website&lt;/a&gt; provides details on how the competition works and what is expected. However, the main point to get across right now is that they are judging based on adaptability, functionality, narrative, and aesthetics. Adaptability is about the generation technique working with the map rather than ignoring it. An example of ignoring the environment would be generating a wooden village where there are no trees. The functionality component is based on real world criteria such as access to food, defenses, etc. The narrative component is about how every area has a story to tell. An example is a castle with part of the tower knocked down. Lastly, aesthetics is about how it looks both in terms of believability and general appeal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; to Python Bindings with Swig</title>
      <link>http://localhost:1313/posts/first/</link>
      <pubDate>Wed, 25 Oct 2017 20:24:55 -0500</pubDate>
      <guid>http://localhost:1313/posts/first/</guid>
      <description>&lt;p&gt;This is a quick walk through of how to take c++ and run it with Python through bindings. If you find yourself wishing to learn more on the topic, &lt;a href=&#34;http://www.swig.org/Doc1.3/Python.html&#34;&gt;Swig’s website&lt;/a&gt; for working with Python is a good start. My experience in setting this up was far more tedious than it had to be and I hope this will save people some time. As a note, I currently work on Ubuntu 16.04 and Python 2.7; this will be tailored to those dependencies, however, I do not believe any major changes will be required to the setup.py file based on &lt;a href=&#34;http://www.swig.org/Doc1.3/Python.html&#34;&gt;Swig&amp;rsquo;s website&lt;/a&gt; and a &lt;a href=&#34;https://stackoverflow.com/questions/32667888/building-extension-for-python-3-with-swig-and-distutils&#34;&gt;StackOverflow question for Python 3&lt;/a&gt;. In addition, the majority of operating systems should be covered by this walk through, with minor tweaks such as yum instead of apt-get for select operating systems.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
