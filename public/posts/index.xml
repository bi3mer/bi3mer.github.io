<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Colan Biemer</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Colan Biemer</description>
    <generator>Hugo -- 0.139.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Nov 2024 12:03:38 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Making Rush Hour 2: Github and Matrix Formats</title>
      <link>http://localhost:1313/posts/making-rush-hour-2/</link>
      <pubDate>Thu, 21 Nov 2024 12:03:38 -0500</pubDate>
      <guid>http://localhost:1313/posts/making-rush-hour-2/</guid>
      <description>&lt;h1 id=&#34;source-control-and-github&#34;&gt;Source Control and GitHub&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; is an awesome website that allows you to have unlimited repositories, for free, that are backed up with &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; on a remote server. In addition, it provides you with helpful tools like &lt;a href=&#34;https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues&#34;&gt;issues&lt;/a&gt; that allow you to keep track of bugs, features, and anything else you want. It is not the end all be all of &lt;a href=&#34;https://aws.amazon.com/devops/source-control/&#34;&gt;source control&lt;/a&gt; and has &lt;a href=&#34;https://www.timedoctor.com/blog/git-mecurial-and-cvs-comparison-of-svn-software/&#34;&gt;pros and cons that should be considered&lt;/a&gt; before being used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Rush Hour 1: Requirements and Basic Structuring</title>
      <link>http://localhost:1313/posts/making-rush-hour-1/</link>
      <pubDate>Sun, 18 Mar 2018 11:53:47 -0500</pubDate>
      <guid>http://localhost:1313/posts/making-rush-hour-1/</guid>
      <description>&lt;p&gt;This is the first in a series of posts where I discuss implementing a version of &lt;a href=&#34;https://apps.apple.com/us/app/unblock-me/id315019111&#34;&gt;Unblock Me&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Rush_Hour_(puzzle)&#34;&gt;Rush Hour&lt;/a&gt;; sample screen shots can be seen in figure one. For the implementation, I’ve decided to use Python 2.7, however, you should be able to follow along with any language. My hope is that each of these posts will be more than just a copy and paste tutorial. To facilitate this, I will be taking deep dives into design decisions, test-driven design, common game AI architecture, general software structure, requirements gathering, servers, and more.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generative Design in Mineraft: MCEdit Basics</title>
      <link>http://localhost:1313/posts/second/</link>
      <pubDate>Mon, 26 Feb 2018 20:27:29 -0500</pubDate>
      <guid>http://localhost:1313/posts/second/</guid>
      <description>&lt;h1 id=&#34;generative-design-in-minecraft-gdmc&#34;&gt;Generative Design in Minecraft (GDMC)&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://gendesignmc.engineering.nyu.edu/&#34;&gt;GDMC&lt;/a&gt; is a competition to generate settlements within a selection of a minecraft map. The &lt;a href=&#34;http://gendesignmc.engineering.nyu.edu/&#34;&gt;project&amp;rsquo;s website&lt;/a&gt; provides details on how the competition works and what is expected. However, the main point to get across right now is that they are judging based on adaptability, functionality, narrative, and aesthetics. Adaptability is about the generation technique working with the map rather than ignoring it. An example of ignoring the environment would be generating a wooden village where there are no trees. The functionality component is based on real world criteria such as access to food, defenses, etc. The narrative component is about how every area has a story to tell. An example is a castle with part of the tower knocked down. Lastly, aesthetics is about how it looks both in terms of believability and general appeal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; to Python Bindings with Swig</title>
      <link>http://localhost:1313/posts/first/</link>
      <pubDate>Wed, 25 Oct 2017 20:24:55 -0500</pubDate>
      <guid>http://localhost:1313/posts/first/</guid>
      <description>&lt;p&gt;This is a quick walk through of how to take c++ and run it with Python through bindings. If you find yourself wishing to learn more on the topic, &lt;a href=&#34;http://www.swig.org/Doc1.3/Python.html&#34;&gt;Swig’s website&lt;/a&gt; for working with Python is a good start. My experience in setting this up was far more tedious than it had to be and I hope this will save people some time. As a note, I currently work on Ubuntu 16.04 and Python 2.7; this will be tailored to those dependencies, however, I do not believe any major changes will be required to the setup.py file based on &lt;a href=&#34;http://www.swig.org/Doc1.3/Python.html&#34;&gt;Swig&amp;rsquo;s website&lt;/a&gt; and a &lt;a href=&#34;https://stackoverflow.com/questions/32667888/building-extension-for-python-3-with-swig-and-distutils&#34;&gt;StackOverflow question for Python 3&lt;/a&gt;. In addition, the majority of operating systems should be covered by this walk through, with minor tweaks such as yum instead of apt-get for select operating systems.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
